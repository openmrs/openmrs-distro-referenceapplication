---
version: 2
plan:
  project-key: REFAPP
  key: OMODDISTRO
  name: Distribution 2.x
  description: Deploys Reference Application SNAPSHOT to maven
stages:
  - Build and push:
      manual: false
      final: false
      jobs:
        - Build and push
  - Deploy to qa-refapp:
      description: Deploys docker image to https://qa-refapp.openmrs.org
      manual: false
      final: false
      jobs:
        - Deploy to qa-refapp
  - Release:
      manual: true
      final: false
      jobs:
        - Release to maven
  - Set variables:
      manual: false
      final: false
      jobs:
        - Set variables
  - Release others:
      manual: false
      final: false
      jobs:
        - Release addons
        - Release war
        - Release readme
        - Release docker image
Build and push:
  key: DNDI
  tasks:
    - checkout:
        force-clean-build: 'false'
        description: Checkout source
    - script:
        interpreter: SHELL
        scripts:
          - |-
            #!/bin/bash -eux
            
            set +x
            
            docker login -u ${bamboo.dockerhub.username} -p ${bamboo.dockerhub.password}
            
            export DEV_IMAGE=${bamboo.docker.image.name}:dev
            export IMAGE=${bamboo.docker.image.name}:nightly
            
            echo "Building dev image"
            
            docker buildx build --push --platform ${bamboo.docker.image.platforms} --target dev -t ${DEV_IMAGE} .
            
            docker run --rm -w="/app" -v /home/bamboo-agent/.m2:/.m2 -v ${bamboo.build.working.directory}:${bamboo.build.working.directory} ${DEV_IMAGE} mvn deploy --settings /.m2/settings.xml
            
            echo "Building production image"
            
            docker buildx build --push --platform ${bamboo.docker.image.platforms} -t ${IMAGE} .
            
            sleep 10
            
            docker pull ${IMAGE}
            
            echo "Inspecting image for id"
            docker image inspect --format='{{index .RepoDigests 0}}' ${IMAGE} > docker-image.txt
        description: Build and push nightly docker image
    - any-task:
        plugin-key: com.atlassian.bamboo.plugins.variable.updater.variable-updater-generic:variable-file-reader
        configuration:
          filename: docker-image.txt
          variable: docker.image.id
          variableScope: RESULT
        description: Save docker image ID
  artifacts:
    - name: referenceapplication-addons
      location: app/package/target
      pattern: '*.zip'
      shared: true
      required: false
    - name: ' referenceapplication-war'
      location: app/package/target/bundled-distro/web
      pattern: '*.war'
      shared: true
      required: false
    - name: ' referenceapplication-properties'
      location: app/package/target/distro/web
      pattern: openmrs-distro.properties
      shared: true
      required: false
    - name: referenceapplication-docker
      location: app/package/target/bundled-distro/web
      pattern: '**/*'
      shared: true
      required: false
    - name: referenceapplication-readme
      location: app/package/target/classes
      pattern: readme.txt
      shared: true
      required: false
  artifact-subscriptions: []
Deploy to qa-refapp:
  key: DTMTS
  tasks:
    # Checkout Task for default repository will be added implicitly during Specs import
    - script:
        interpreter: SHELL
        scripts:
          - |-
            #!/bin/bash -eu
            
            # push docker image
            docker login -u ${bamboo.dockerhub.username} -p ${bamboo.dockerhub.password}
            
            set -x
            docker pull ${bamboo.docker.image.id}
            docker tag ${bamboo.docker.image.id} ${bamboo.docker.image.name}:qa
            docker push ${bamboo.docker.image.name}:qa
            
            
            ssh -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null  \
                bamboo@qa-refapp.openmrs.org \
                sudo deploy-compose qa-refapp
        description: Redeploy qa-refapp (dockerhub image)
  artifact-subscriptions: []
Release to maven:
  key: RTM
  other:
    all-other-apps:
      custom:
        auto:
          label: release
        clover: {}
        buildHangingConfig.enabled: 'false'
  tasks:
    - checkout:
        force-clean-build: 'true'
        description: Checkout Default Repository
    - checkout:
        repository: Release scripts
        path: release-scripts
        force-clean-build: 'true'
        description: Checkout Default Repository
    - command:
        executable: Bash
        argument: release-scripts/release-prepare-perform.sh -r "${bamboo.maven.release.version}" -d "${bamboo.maven.development.version}"
        envrionment: JAVA_HOME=${bamboo.capability.system.jdk.openjdk-8-jdk} MAVEN_HOME=${bamboo.capability.system.builder.mvn3.Maven 3}
        description: Release prepare perform
  artifact-subscriptions: []
Set variables:
  key: SV
  other:
    all-other-apps:
      custom:
        auto:
          label: release
        clover: {}
        buildHangingConfig.enabled: 'false'
  tasks:
    # Checkout Task for default repository will be added implicitly during Specs import
    - script:
        interpreter: BINSH_OR_CMDEXE
        scripts:
          - echo "false" > false.txt
        description: Preparing to reset preparing.refapp.distro.release global variable
    - any-task:
        plugin-key: com.atlassian.bamboo.plugins.variable.updater.variable-updater-generic:variable-file-reader
        configuration:
          filename: false.txt
          variable: preparing.refapp.distro.release
          includeGlobals: 'true'
          variableScope: PLAN
        description: Reseting preparing.refapp.distro.release global variable
    - inject-variables:
        file: openmrs-distro.properties
        scope: RESULT
        namespace: distro
        description: Load versions from openmrs-distro.properties
  artifact-subscriptions:
    - artifact: ' referenceapplication-properties'
Release addons:
  key: RA
  tasks:
    - checkout:
        repository: Release scripts
        path: release-scripts
        force-clean-build: 'false'
    - command:
        executable: Bash
        argument: release-scripts/scp-to-sourceforge.sh ${bamboo.build.working.directory} referenceapplication-package-${bamboo.distro.version}-addons.zip releases/OpenMRS_Reference_Application_${bamboo.distro.version} referenceapplication-addons-${bamboo.distro.version}.zip
        description: Deploy to sourceforge
  artifact-subscriptions:
    - artifact: referenceapplication-addons
Release war:
  key: RW
  tasks:
    - checkout:
        repository: Release scripts
        path: release-scripts
        force-clean-build: 'false'
    - command:
        executable: Bash
        argument: release-scripts/scp-to-sourceforge.sh ${bamboo.build.working.directory} openmrs.war releases/OpenMRS_Reference_Application_${bamboo.distro.version} openmrs.war
        description: Deploy to sourceforge
  artifact-subscriptions:
    - artifact: ' referenceapplication-war'
Release readme:
  key: RR
  tasks:
    - checkout:
        repository: Release scripts
        path: release-scripts
        force-clean-build: 'false'
    - command:
        executable: Bash
        argument: release-scripts/scp-to-sourceforge.sh ${bamboo.build.working.directory} readme.txt releases/OpenMRS_Reference_Application_${bamboo.distro.version} readme.txt
        description: Deploy to sourceforge
  artifact-subscriptions:
    - artifact: referenceapplication-readme
Release docker image:
  key: RDITD
  tasks:
    # Checkout Task for default repository will be added implicitly during Specs import
    - script:
        interpreter: SHELL
        scripts:
          - |+
            #!/bin/bash -eu
            
            docker login -u ${bamboo.dockerhub.username} -p ${bamboo.dockerhub.password}
            
            set -x
            
            version="${bamboo.maven.release.version}"
            
            export DEV_IMAGE=${bamboo.docker.image.name}:${version}-dev
            export IMAGE=${bamboo.docker.image.name}:${version}
            
            echo "Building dev image"
            
            docker buildx build --push --platform ${bamboo.docker.image.platforms} --target dev -t ${DEV_IMAGE} .
            
            docker run --rm -w="/app" -v /home/bamboo-agent/.m2:/.m2 ${DEV_IMAGE} mvn deploy --settings /.m2/settings.xml
            
            echo "Building production image"
            
            docker buildx build --push --platform ${bamboo.docker.image.platforms} -t ${IMAGE} .
            
            sleep 10
            
            docker pull ${IMAGE}
            
            echo "Inspecting image for id"
            docker image inspect --format='{{index .RepoDigests 0}}' ${IMAGE} > docker-image.txt
            
            # Tag as major version as well
            major_version=$(echo "${version}" | sed -r "s/^([0-9]+\.[0-9]+).*/\1/")
            if [ "${major_version}" != "${version}" ]; then
              docker buildx imagetools create -t ${bamboo.docker.image.name}:${major_version} ${IMAGE}
            fi
            
            docker buildx imagetools create -t ${bamboo.docker.image.name}:latest ${IMAGE}
        description: Build and push docker image
    - any-task:
        plugin-key: com.atlassian.bamboo.plugins.variable.updater.variable-updater-generic:variable-file-reader
        configuration:
          filename: docker-image.txt
          variable: docker.image.id
          variableScope: RESULT
        description: Read docker image ID
variables:
  checkVersions: versions:update-properties -Pupdate-to-latest
  docker.image.id: none
  docker.image.name: openmrs/openmrs-reference-application
  docker.image.tag: nightly
  maven.development.version: 2.13.0-SNAPSHOT
  maven.release.version: 2.13.0
  openMRSVersion: 2.5.9
  preparing.refapp.distro.release: 'false'
repositories:
  - Distribution:
      scope: global
  - Release scripts:
      scope: global
triggers:
  - polling:
      period: '60'
      repositories:
        - Distribution
# Trigger type TriggerProperties{name='Single daily build', description='', conditions=[], enabled=true} is not supported yet
branches:
  create: manually
  delete: never
  link-to-jira: true
notifications:
  - events:
      - plan-failed
    recipients:
      - committers
      - emails:
          - dev-refapp@openmrs.org
      - watchers
labels:
  - test
dependencies:
  require-all-stages-passing: false
  enabled-for-branches: true
  block-strategy: block_if_parent_has_changes
  plans: []
other:
  concurrent-build-plugin: system-default
  all-other-apps:
    custom.buildExpiryConfig:
      period: days
      labelsToKeep: release
      enabled: 'true'
      expiryTypeArtifact: 'true'
      duration: '2'
      excludeLabels: 'true'
      buildsToKeep: '2'
---
version: 2
plan:
  key: REFAPP-OMODDISTRO
plan-permissions:
  - users:
      - ibacher
    roles:
      - logged-in
    permissions:
      - view
      - edit
      - build
      - clone
      - admin
  - roles:
      - anonymous
    permissions:
      - view
...
